// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SkyblockPlayer {
  uuid String @id
  updateTime BigInt
  response String @db.LongText
}

model BazaarItemPrice {
  uuid String @id @default(uuid())
  itemId String
  time BigInt
  buyPrice Float
  sellPrice Float
}

model ItemData {
  itemId String @id
  rarity String
  name String
  lore String @db.LongText
  material String
  unstackable Boolean
  recipe String @db.LongText
  nbtTag String @db.LongText
  npcSellPrice Float
  bazaarData ItemBazaarData?
  aucitonData ItemAuctionData?
}

model ItemBazaarData {
  item ItemData? @relation(fields: [itemId], references: [itemId])
  itemId String @id
  buyPrice Float
  sellPrice Float
  averageBuyPrice Float
  averageSellPrice Float
  history ItemBazaarHistory[]
}

model ItemBazaarHistory {
  bazaarData ItemBazaarData? @relation(fields: [itemId], references: [itemId]) 
  numId Int @id @default(value: autoincrement())
  itemId String? 
  buyPrice Float
  sellPrice Float
  time DateTime @default(value: now())
}

model ItemAuctionData {
  item ItemData? @relation(fields: [itemId], references: [itemId])
  itemId String @id
  lowestBin Float
  averageLowestBin Float
  auctionHistory ItemAuctionHistory[]
  lowestBinHistory ItemLowestBinHistory[]
}

model ItemLowestBinHistory {
  auctionData ItemAuctionData? @relation(fields: [itemId], references: [itemId]) 
  numId Int @id @default(value: autoincrement())
  itemId String
  price BigInt
  time DateTime @default(value: now())
}

model ItemAuctionHistory {
  auctionData ItemAuctionData? @relation(fields: [itemId], references: [itemId]) 
  numId Int @id @default(value: autoincrement())
  auctionUUID String
  playerUUID String
  start BigInt
  end BigInt
  itemName String
  itemBytes String @db.LongText
  itemId String
  bin Boolean
  startingBid BigInt
  highestBid BigInt
  time DateTime @default(value: now())
}

model PublicData {
  uuid String @id @default(uuid())
  path String 
  repo String
  owner String
  data String @db.LongText
  lastTimeUpdate DateTime @default(now())
}

model FunFact {
  id Int @id @default(autoincrement())
  fact String
  day Int
}

model UUID {
  id Int @id @default(autoincrement())
  username String
  uuid String
  lastTimeUpdate DateTime @default(now())
}